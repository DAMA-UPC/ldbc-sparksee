#include "Database.h"
#include "TypeCache.h"
#include "Utils.h"
#include <utils/Utils.h>
#include "snbInteractive.h"
#include <gdb/Graph.h>
#include <gdb/Objects.h>
#include <gdb/ObjectsIterator.h>
#include <gdb/Session.h>
#include <gdb/Sparksee.h>
#include <gdb/Value.h>
#include <stdio.h>
#include <string>
#include <cstring>
#include <vector>
#include <map>
#include <algorithm>
#include <boostPatch/property_tree/ptree.hpp>
#include <boostPatch/property_tree/json_parser.hpp>
#include <boost/scoped_ptr.hpp>
#include <boost/bind.hpp>
#include <time.h>

namespace gdb = sparksee::gdb;
namespace snb = sparksee::snb;
namespace ptree = boost::property_tree;

namespace bi {
namespace query18 {

struct Result {

    Result(int posts, int persons) 
    : num_posts(posts), num_persons(persons) {}

    static Result create(std::map<int, int>::value_type map_pair) {
        return Result(map_pair.first, map_pair.second);
    }

    int num_posts;
    int num_persons;
};

bool compare_result(const Result &lhs, const Result &rhs) {
  if (lhs.num_persons != rhs.num_persons) {
  return sparksee::utils::descending(lhs.num_persons, rhs.num_persons);
  }

  return sparksee::utils::descending(lhs.num_posts, rhs.num_posts);
}

static ptree::ptree Project(const gdb::Graph &graph,
                            const snb::TypeCache &cache, const Result &result) {
    gdb::Value val;
    ptree::ptree pt;

    pt.put<int>("postCount", result.num_posts);
    pt.put<int>("personCount", result.num_persons);

    return pt;
}

static ptree::ptree Project(const gdb::Graph &graph,
                            const snb::TypeCache &cache,
                            const std::vector<Result> &results, int limit) {
    ptree::ptree pt;
    int count = 0;
    for (std::vector<Result>::const_iterator it = results.begin();
        it != results.end() /*&& count < limit*/; ++it, ++count) {
      pt.push_back(std::make_pair("", Project(graph, cache, *it)));
    }
    return pt;
}

datatypes::Buffer Execute(gdb::Session *sess, long long date, int num_languages, const char** languages, unsigned int threshold,  int limit) {
#ifdef VERBOSE
    printf("Bi QUERY18: %llu\n", date);
#endif

    BEGIN_EXCEPTION

    boost::scoped_ptr<gdb::Graph> graph(sess->GetGraph());
    snb::TypeCache *cache = snb::TypeCache::instance(graph.get());

    BEGIN_TRANSACTION;

    gdb::Value value;
    value.SetTimestamp(date);

    boost::scoped_ptr<gdb::Objects> persons(graph->Select(cache->person_t));
    boost::scoped_ptr<gdb::Objects> posts(graph->Select(cache->post_creation_date_t, gdb::GreaterThan, value));
    boost::scoped_ptr<gdb::Objects> comments(graph->Select(cache->comment_creation_date_t, gdb::GreaterThan, value));
    
    std::map<int, int> result_map;
    boost::scoped_ptr<gdb::ObjectsIterator> person_iterator(persons->Iterator());
    long total_posts = 0;
    long total_comments = 0;
    while (person_iterator->HasNext()) {
        long long person_oid = person_iterator->Next();
        boost::scoped_ptr<gdb::Objects> person_posts(graph->Neighbors(person_oid, cache->post_has_creator_t, gdb::Ingoing));
        boost::scoped_ptr<gdb::Objects> person_comments(graph->Neighbors(person_oid, cache->comment_has_creator_t, gdb::Ingoing));
        person_posts->Intersection(posts.get());
        person_comments->Intersection(comments.get());
        boost::scoped_ptr<gdb::Objects> messages(sess->NewObjects());
        boost::scoped_ptr<gdb::ObjectsIterator> posts_iterator(person_posts->Iterator());
        while(posts_iterator->HasNext()) {
          gdb::oid_t next_post = posts_iterator->Next();
          graph->GetAttribute(next_post,cache->post_language_t, value);
          gdb::Value content;
          gdb::Value image;
          graph->GetAttribute(next_post, cache->post_content_t, content);
          graph->GetAttribute(next_post, cache->post_image_file_t, image);
          if(image.IsNull() && !value.IsNull() && value.GetString().length() != 0 && !content.IsNull() &&  content.GetString().length() != 0 && content.GetString().length() < threshold) {
            for (int i = 0; i < num_languages; ++i) {
              if(value.GetString().compare( sparksee::utils::to_wstring(std::string(languages[i])) ) == 0) {
                messages->Add(next_post);
                total_posts++;
                break;
              }
            }

          }
        }

        boost::scoped_ptr<gdb::ObjectsIterator> comments_iterator(person_comments->Iterator());
        while(comments_iterator->HasNext()) {
          gdb::oid_t next_comment = comments_iterator->Next();
          gdb::Value content;
          gdb::Value image;
          graph->GetAttribute(next_comment, cache->comment_content_t, content);
          if(!content.IsNull() && content.GetString().length() != 0 && content.GetString().length() < threshold) {
            gdb::Value language;
            gdb::oid_t initiator = next_comment;
            while(true) {
              initiator = boost::scoped_ptr<gdb::Objects>(graph->Neighbors(initiator,cache->reply_of_t,gdb::Outgoing))->Any();
              if(graph->GetObjectType(initiator) == cache->post_t) {
                break;
              }
            }
            graph->GetAttribute(initiator,cache->post_language_t, language);
            for (int i = 0; i < num_languages; ++i) {
              if(language.GetString().compare( sparksee::utils::to_wstring(std::string(languages[i]))) == 0) {
                messages->Add(next_comment);
                total_comments++;
                break;
              }
            }
          }
        }
        
        std::map<int,int>::iterator it = result_map.find(messages->Count());
        if( it  == result_map.end()) {
          result_map[messages->Count()] = 1;
        } else {
          result_map[messages->Count()] = result_map[messages->Count()]+1;
        }
    }
    
    std::vector<Result> intermediate_result;
    intermediate_result.reserve(result_map.size());
    std::transform(result_map.begin(), result_map.end(), std::back_inserter(intermediate_result), &Result::create);
    std::sort(intermediate_result.begin(), intermediate_result.end(), compare_result);
    ptree::ptree pt = Project(*graph, *cache, intermediate_result, limit);
    COMMIT_TRANSACTION

#ifdef VERBOSE
    printf("EXIT BI QUERY18: %llu %lu %lu %lu\n", date, intermediate_result.size(), total_posts, total_comments);
#endif
    char* ret = snb::utils::to_json(pt);
    return datatypes::Buffer(ret, strlen(ret));

    END_EXCEPTION
}
}
}
